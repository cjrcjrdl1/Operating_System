프로세서(CPU) = 연산장치 + 레지스터 + 제어장치
메모리 = RAM
주변장치(I/O)

이들을 합한게 폰 노이만 구조

프로세서 : 컴퓨터 하드웨어에 부착한 모든 장치의1 동작을 제어하고 명령을 실행, 중앙처리장치(CPU)라고도 함
사용자가 변경할 수 있는지에 따라 사용자 가시 레지스터, 사용자 불가시 레지스터로 구분

사용자 가시 레지스터
데이터 레지스터 : 함수 연산에 필요한 데이터를 저장
주소 레지스터 : 주소나 유효 주소를 계산하는 데 필요한 주소의 일부분을 저장, 주소 레지스터에 저장한 값을 사용하여 산술 연산을 할 수 있음
- 기준 주소 레지스터 : 프로그램을 실행할 때 사용하는 기준 주소 값을 저장
- 인덱스 레지스터 : 유효 주소를 계산하는 데 사용하는 주소 정보를 저장
- 스택 포인터 레지스터 : 메모리에 프로세서 스택을 구현하는 데 사용

사용자 불가시 레지스터
프로그램 카운터 : 다음에 실행할 명령어의 주소를 보관하는 레지스터, 계수기로 되어 있어 실행할 명령어를 메모리에서 읽으면 명령어의 길이만큼 증가하여 다음 명령어를 가리킴
명령어 레지스터 : 현재 실행하는 명령어를 보관하는 레지스터
누산기 : 데이터를 일시적으로 저장하는 레지스터
메모리 주소 레지스터 : 프로세서가 참조하려는 데이터의 주소를 명시하여 메모리에 접근하는 버퍼 레지스터
메모리 버퍼 레지스터 : 프로세서가 메모리에서 읽거나 메모리에 저장할 데이터 자체를 보관하는 버퍼 레지스터

레지스터 : 프로세서 내부에 위치, 가장 빠른 메모리
메인 메모리 : 프로세서 외부에 위치, 프로세서에서 즉각적으로 수행할 프로그램과 데이터를 저장하거나 프로세서에서 처리한 결과를 메인 메모리에 저장, 주기억장치 또는 1차 기억장치라고 함, DRAM을 많이 사용
컴파일로 논리적 주소를 물리적 주소로 변환하는 것을 매핑 또는 메모리 맵이라고 함
메모리 접근 시간이 메모리 사이클 시간보다 더 빠름
메인 메모리는 디스크 입출력 병목 

캐시 : 프로세서 내부나 외부에 위치, 처리속도가 빠른 프로세서와 상대적으로 느린 메인 메모리와의 속도 차이를 보완하는 고속 버퍼
- 메인 메모리에서 데이터를 블록 단위로 가져와 프로세서에 워드 단위로 전달하여 속도를 높인다
- 캐시의 성능은 작은 용량의 캐시에 프로세서가 이후 참조할 정보가 얼마나 들어 있는가에 따라 결정
- 프로세서가 참조하려는 정보가 있을 때 캐시 적중, 없을 때 캐시 실패
- 공간적 지역성은 대부분 프로그램이 참조한 주소와 인접한 주소의 내용을 다시 참조하는 특성, 시간적 지역성은 한 번 참조한 주소를 고 다시 참조하는 특성
- 지역성은 블록이 크면 캐시 히트율이 올라갈 수 있음을 의미하지만 블록이 커지만 이에 따른 전송 부담과 캐시 데이터 교체 작업이 자주 일어나므로 블록 크기를 무작정 늘릴순 없다

보조기억장치 : 프로그램과 데이터를 저장하는 하드웨어로 2차 기억장치, 외부기억장치라 하고 자가디스크, 광디스크, 자기테이프 등이 있음

시스템 버스 : 하드웨어를 물리적으로 연결하여 서로 데이터를 주고받을 수 있게 한 통로, 기능에 따라 데이터 버스, 주소 버스, 제어 버스로 구분
- 데이터 버스 : 프로세서와 메인 메모리, 주변장치 사이에서 데이터를 전송
- 주소 버스 : 프로세서가 시스템의 구성 요소를 식별하는 주소 정보를 전송
- 제어 버스 : 프로세서가 시스템의 구성 요소를 제어하는 데 사용, 제어 신호로 연산장치의 연산 종류와 메인 메모리 읽기나 쓰기 동작을 결정

주변 장치 : 프로세서와 메인 메모리를 제외한 나머지 하드웨어 구성 요소, 입출력장치라고도 하고 크게 입력장치, 출력장치, 저장장치로 구분
- 입력장치 : 컴퓨터에 처리할 데이터를 외부에서 입력하는 장치
- 출력장치 : 컴퓨터에서 처리한 데이터를 외부로 보내는 장치
- 저장장치 : 메인 메모리와 달리 거의 영구적으로 데이터를 저장하는 장치

컴퓨터 시스템으로 작업 처리 순서
1. 입력장치로 정보를 입력받아 메모리에 저장
2. 메모리에 저장한 정보를 프로그램 제어에 따라 인출하여 연산장치에서 처리
3. 처리한 정보를 출력장치에 표시하거나 보조기억장치에 저장

입력장치로 컴퓨터에 유입되는 정보는 명령어와 데이터로 구분, 명령어는 실행할 산술 논리 연산의 동작을 명시하는 문장으로 명령어의 집합이 프로그램

명령어는 프로세서가 실행할 연산인 연산 부호와 명령어가 처리할 데이터, 데이터를 저장한 레지스터나 메모리 주소인 피연산자로 구성

명령어는 프로세서에 따라 고정 길이나 가변 길이를 구성, 연산 부호는 특별한 경우가 아니면 하나, 피연산자는 여러개일 수 있음

연산 부호(OPcode) : 프로세서가 실행할 동작인 연산을 지정

피연산자(operand) : 연산할 데이터 정보를 저장 데이터는 레지스터나 메모리, 가상 기억장치, 입출력장치 등에 위치할 수 있음, 소스 피연산자(연산에 사용)와 목적지 피연산자(값)로 나뉨

명령어는 실행 전에 메인 메모리에 저장, 한 번에 하나씩 프로세서에 순차적으로 전송하여 해석, 실행함

피연산자에 데이터가 있는 레지스터나 메모리 주소를 지정하면 직접 주소, 데이터가 있는 레지스터나 메모리 주소 정보를 지정하면 간접 주소 -> 피연산자가 있으면 직접주소 없으면 간접주소

간접 주소는 데이터 주소를 읽을 때 한 번, 데이터를 읽을 때 한 번 총 두 번 메모리를 참조

명령어의 실행 과정 : 1. 명령어 인출, 2. 명령어 해석, 프로그램 카운터 변경, 3. 피연산자 인출, 4. 명령어 실행, 5. 결과 저장, 6. 다음 명령어로 이동(다시 1번부터 시작)
명령어를 인출하여 연산 완료한 시점까지를 인출-해석-실행 사이클 또는 인출-실행 사이클이라고 하고 명령어 실행 사이클이라고도 함

인출 사이클 : 명령어 실행 사이클의 첫 번째 단계, 메모리에서 명령어를 읽어 명령어 레지스터에 저장하고 다음 명령어를 실행하려고 프로그램 카운터를 증가시킴 이 때 인출 사이클에 소요되는 시간을 명령어 인출 시간
1. PC -> MAR : PC에 저장된 주소를 프로세서 내부 버스를 이용하여 MAR에 전달
2. Memory(MAR) -> MBR : MAR에 저장된 주소에 해당하는 메모리 위치에서 명령어를 인출한 후 이 명령어를 MBR에 저장, 이 때 제어장치는 메모리에 저장된 내용을 읽도록 제어 신호를 발생시킴
  PC + 1  -> PC : 다음 명령어를 인출하려고 PC를 증가시킴
3. MBR -> IR : MBR에 저장된 내용을 IR에 전달

실행 사이클 : 인출한 명령어를 해독하고 그 결과에 따라 제어 신호를 발생시켜 명령어를 실행

간접 사이클 : 명령어를 수행하기 전에 실제 데이터가 저장된 주기억장치의 주소인 유효 주소를 한 번 더 읽어 옴
1. IR(addr) -> MAR : IR에 저장된 명령어의 피연산자(주소부)를 MAR에 전달
2. Memory(MAR) -> MBR : MAR에 저장된 주소에 해당하는 메모리 위치에서 데이터를 인출한 후 이 데이터를 MBR에 저장, 이때 제어장치는 메모리에 저장된 내용을 읽도록 제어 신호를 발생시킴
3. MBR -> IR(addr) : MBR에 저장된 내용을 IR에 전달
